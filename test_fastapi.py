"""
–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è FastAPI —Å–µ—Ä–≤–µ—Ä–∞ Text Generation WebUI
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API endpoints
"""

import requests
import json
import time
from typing import Dict, Any

class TextGenAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI —Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    def __init__(self, base_url: str = "http://127.0.0.1:8000"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
    
    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = self.session.get(f"{self.base_url}/health")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e), "status": "unavailable"}
    
    def get_model_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
        try:
            response = self.session.get(f"{self.base_url}/model/info")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e)}
    
    def generate_text(self, prompt: str, **kwargs) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        data = {
            "prompt": prompt,
            "max_tokens": kwargs.get("max_tokens", 200),
            "temperature": kwargs.get("temperature", 0.7),
            "top_p": kwargs.get("top_p", 0.9),
            "top_k": kwargs.get("top_k", 20),
            "repetition_penalty": kwargs.get("repetition_penalty", 1.18),
            "stream": kwargs.get("stream", False)
        }
        
        try:
            response = self.session.post(f"{self.base_url}/generate", json=data)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e)}
    
    def chat_completion(self, messages: list, **kwargs) -> Dict[str, Any]:
        """–ß–∞—Ç completion"""
        data = {
            "messages": messages,
            "max_tokens": kwargs.get("max_tokens", 200),
            "temperature": kwargs.get("temperature", 0.7),
            "stream": kwargs.get("stream", False)
        }
        
        try:
            response = self.session.post(f"{self.base_url}/chat", json=data)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e)}
    
    def get_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            response = self.session.get(f"{self.base_url}/settings")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e)}
    
    def update_settings(self, settings: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            response = self.session.post(f"{self.base_url}/settings", json=settings)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e)}
    
    def stop_generation(self) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
        try:
            response = self.session.post(f"{self.base_url}/stop")
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            return {"error": str(e)}

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ Text Generation WebUI")
    print("=" * 60)
    
    client = TextGenAPIClient()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...")
    health = client.health_check()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {health}")
    
    if health.get("status") != "healthy":
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    print("\n2Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏...")
    model_info = client.get_model_info()
    print(f"–ú–æ–¥–µ–ª—å: {model_info}")
    
    # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    print("\n3Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
    prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—Å–º–æ—Å–µ:"
    result = client.generate_text(
        prompt=prompt,
        max_tokens=150,
        temperature=0.8
    )
    
    if "error" not in result:
        print(f"–ü—Ä–æ–º–ø—Ç: {prompt}")
        print(f"–û—Ç–≤–µ—Ç: {result['text']}")
        print(f"–¢–æ–∫–µ–Ω—ã: {result['tokens']}, –í—Ä–µ–º—è: {result['generation_time']:.2f}—Å")
    else:
        print(f"–û—à–∏–±–∫–∞: {result['error']}")
    
    # –ß–∞—Ç completion
    print("\n4Ô∏è‚É£ –ß–∞—Ç completion...")
    messages = [
        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"},
    ]
    
    chat_result = client.chat_completion(messages=messages, max_tokens=100)
    
    if "error" not in chat_result:
        if "choices" in chat_result and chat_result["choices"]:
            assistant_reply = chat_result["choices"][0]["message"]["content"]
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {messages[0]['content']}")
            print(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant_reply}")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {chat_result.get('usage', {})}")
        else:
            print("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ chat completion")
    else:
        print(f"–û—à–∏–±–∫–∞ —á–∞—Ç–∞: {chat_result['error']}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\n5Ô∏è‚É£ –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    settings = client.get_settings()
    if "error" not in settings:
        key_settings = {k: v for k, v in settings.items() if k in 
                       ['temperature', 'top_p', 'top_k', 'max_tokens', 'repetition_penalty']}
        print(f"–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {json.dumps(key_settings, indent=2, ensure_ascii=False)}")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {settings['error']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()